# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Curtis Baltimore <curtisbaltimore@protonmail.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-29 01:28+0200\n"
"PO-Revision-Date: 2022-08-29 00:30+0000\n"
"Last-Translator: Curtis Baltimore <curtisbaltimore@protonmail.com>, 2022\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../../_doc/developer/services/qrexec.rst:3
#: 79d2d2a6fa7b4061b04e74bd0ebda378
msgid "Qrexec: secure communication across domains"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:5
#: 7996cb721028435fbbcc03c368b52606
msgid ""
"(*This page is about qrexec v3. For qrexec v2, see*\\ :doc:`here "
"</developer/services/qrexec2>`\\ *.*)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:8
#: 0657613b5ec948f48149d77885a2664e
msgid ""
"The **qrexec framework** is used by core Qubes components to implement "
"communication between domains. Qubes domains are strictly isolated by "
"design. However, the OS needs a mechanism to allow the administrative domain"
" (dom0) to force command execution in another domain (VM). For instance, "
"when a user selects an application from the KDE menu, it should start in the"
" selected VM. Also, it is often useful to be able to pass "
"stdin/stdout/stderr from an application running in a VM to dom0 (and the "
"other way around). (For example, so that a VM can notify dom0 that there are"
" updates available for it). By default, Qubes allows VMs initiate such "
"communications in specific circumstances. The qrexec framework generalizes "
"this process by providing a remote procedure call (RPC) protocol for the "
"Qubes architecture. It allows users and developers to use and design secure "
"inter-VM tools."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:23
#: 2cd1e79ab2fc431cba830b604a1aac74
msgid "Qrexec basics: architecture and examples"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:25
#: ab8252a944804895ac572534f8173604
msgid ""
"Qrexec is built on top of *vchan*, a Xen library providing data links "
"between VMs. During domain startup , a process named ``qrexec-daemon`` is "
"started in dom0, and a process named ``qrexec-agent`` is started in the VM. "
"They are connected over a **vchan** channel. ``qrexec-daemon`` listens for "
"connections from a dom0 utility named ``qrexec-client``. Let’s say we want "
"to start a process (call it ``VMprocess``) in a VM (``someVM``). Typically, "
"the first thing that a ``qrexec-client`` instance does is to send a request "
"to the ``qrexec-daemon``, which in turn relays it to ``qrexec-agent`` "
"running in ``someVM``. ``qrexec-daemon`` assigns unique vchan connection "
"details and sends them to both ``qrexec-client`` (in dom0) and ``qrexec-"
"agent`` (in ``someVM``). ``qrexec-client`` starts a vchan server, which "
"``qrexec-agent`` then connects to. Once this channel is established, "
"stdin/stdout/stderr from the VMprocess is passed between ``qrexec-agent`` "
"and the ``qrexec-client`` process."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:44
#: ../../../_doc/developer/services/qrexec.rst:44
#: c66ae0c8300d4f7d9dedd991a1cfe40c f47318e04ab54ca78f31fb729df72330
msgid "qrexec basics diagram"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:46
#: 05dadc9a27b148769df9ec406107ef74
msgid ""
"The ``qrexec-client`` command is used to make connections to VMs from dom0. "
"For example, the following command creates an empty file called ``hello-"
"world.txt`` in the home folder of ``someVM``:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:54
#: 4d6b43efd36f43b89d8478065414da3f
msgid ""
"The string before the colon specifies what user to run the command as. The "
"``-e`` flag tells ``qrexec-client`` to exit immediately after sending the "
"execution request and receiving a status code from ``qrexec-agent`` (whether"
" the process creation succeeded). With this option, no further data is "
"passed between the domains. By contrast, the following command demonstrates "
"an open channel between dom0 and someVM (in this case, a remote shell):"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:66
#: 4953c59dffc2489e9fbeaa6de815ab25
msgid ""
"The ``qvm-run`` command is heavily based on ``qrexec-client``. It also takes"
" care of additional activities, e.g. starting the domain if it is not up yet"
" and starting the GUI daemon. Thus, it is usually more convenient to use "
"``qvm-run``."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:71
#: 15f3766ce0e8463f8df96723ad90a21d
msgid ""
"There can be an almost arbitrary number of ``qrexec-client`` processes for a"
" given domain. The limiting factor is the number of available vchan "
"channels, which depends on the underlying hypervisor, as well the domain’s "
"OS."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:76
#: 89e1a95b77d8435db4c6d047a3fc4551
msgid ""
"For more details on the qrexec framework and protocol, see “ :doc:`Qubes RPC"
" internals </developer/services/qrexec-internals>`.”"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:79
#: 74583f2b6ed54a0c8a44e4ace5821f95
msgid "Qubes RPC services"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:81
#: c49845b7181047548bcebb451170ae99
msgid ""
"Some common tasks (like copying files between VMs) have an RPC-like "
"structure: a process in one VM (say, the file sender) needs to invoke and "
"send/receive data to some process in other VM (say, the file receiver). The "
"Qubes RPC framework was created to securely facilitate a range of such "
"actions."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:87
#: 06f3888932e74e41a429932021eef1b0
msgid ""
"Obviously, inter-VM communication must be tightly controlled to prevent one "
"VM from taking control of another, possibly more privileged, VM. Therefore "
"the design decision was made to pass all control communication via dom0, "
"that can enforce proper authorization. Then, it is natural to reuse the "
"already-existing qrexec framework."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:93
#: 657103ccd51d40dfbf6c389d7f95036e
msgid ""
"Also, note that bare qrexec provides ``VM <-> dom0`` connectivity, but the "
"command execution is always initiated by dom0. There are cases when VM needs"
" to invoke and send data to a command in dom0 (e.g. to pass information on "
"newly installed ``.desktop`` files). Thus, the framework allows dom0 to be "
"the RPC target as well."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:99
#: 0916bc349303429ba2fc4e3a36af20b8
msgid ""
"Thanks to the framework, RPC programs are very simple – both RPC client and "
"server just use their stdin/stdout to pass data. The framework does all the "
"inner work to connect these processes to each other via ``qrexec-daemon`` "
"and ``qrexec-agent``. Additionally, disposable VMs are tightly integrated – "
"RPC to a DisposableVM is identical to RPC to a normal domain, all one needs "
"is to pass ``@dispvm`` as the remote domain name."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:108
#: 735a3b0753d84e899fe76bbaeeb1ab9d
msgid "Qubes RPC administration"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:111
#: 4666378589b14c87b2055fe08f3cbb63
msgid "Policy files"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:113
#: 9399c3b6842848a99828068ec01a19c7
msgid ""
"The dom0 directory ``/etc/qubes-rpc/policy/`` contains a file for each "
"available RPC action that a VM might call. Together the contents of these "
"files make up the RPC access policy database. Policies are defined in lines "
"with the following format:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:122
#: c53b851c314146e8bd724e0af3f19cb0
msgid ""
"You can specify srcvm and destvm by name or by one of the reserved keywords "
"such as ``@anyvm``, ``@dispvm``, or ``dom0``. (Of these three, only "
"``@anyvm`` keyword makes sense in the srcvm field. Service calls from dom0 "
"are currently always allowed, and ``@dispvm`` means “new VM created for this"
" particular request,” so it is never a source of request.) Other methods "
"using *tags* and *types* are also available (and discussed below)."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:130
#: 2ca33908bb1a440fa3ca4573cd053f6e
msgid ""
"Whenever a RPC request for an action is received, the domain checks the "
"first matching line of the relevant file in ``/etc/qubes-rpc/policy/`` to "
"determine access: whether to allow the request, what VM to redirect the "
"execution to, and what user account the program should run under. Note that "
"if the request is redirected (``target=`` parameter), policy action remains "
"the same – even if there is another rule which would otherwise deny such "
"request. If no policy rule is matched, the action is denied. If the policy "
"file does not exist, the user is prompted to create one. If there is still "
"no policy file after prompting, the action is denied."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:141
#: 9d4a3b8dfbdc436db1a0f259a5c44064
msgid ""
"In the target VM, a file in either of the following locations must exist, "
"containing the file name of the program that will be invoked, or being that "
"program itself – in which case it must have executable permission set "
"(``chmod +x``): - ``/etc/qubes-rpc/RPC_ACTION_NAME`` when you make it in the"
" template qube; - ``/usr/local/etc/qubes-rpc/RPC_ACTION_NAME`` for making it"
" only in an app qube."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:150
#: c96af84811a4424d8988a7f1e8f44a5f
msgid "Making an RPC call"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:152
#: 0042af326c344220907a02d4f2332a59
msgid "From outside of dom0, RPC calls take the following form:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:158
#: 53c9b259aebd4b318c621b9f27cf92c8
msgid "For example:"
msgstr "Zum Beispiel:"

#: ../../../_doc/developer/services/qrexec.rst:164
#: f225e3e05a6245e29a23e6d9c55abfc0
msgid ""
"Note that only stdin/stdout is passed between RPC server and client – "
"notably, no command line arguments are passed. By default, stderr of client "
"and server is logged in the syslog/journald of the VM where the process is "
"running."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:169
#: 3f001fb6da0e4994996a912438fd612b
msgid ""
"It is also possible to call service without specific client program – in "
"which case server stdin/out will be connected with the terminal:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:177
#: 2fb2f6b331a4487193d892bd0178550d
msgid "Specifying VMs: tags, types, targets, etc."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:179
#: 2a45c99639024349b6afe7022c35885b
msgid ""
"There are severals methods for specifying source/target VMs in RPC policies."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:182
#: 357298b471e7429ea599938aa56258fe
msgid "``@tag:some-tag`` - meaning a VM with tag ``some-tag``"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:183
#: 2b614b833307423280c4d408df3c4242
msgid ""
"``@type:type`` - meaning a VM of ``type`` (like ``AppVM``, ``TemplateVM`` "
"etc)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:186
#: d64dedbfb44d4ebab0ae21b6572e997b
msgid ""
"Target VM can be also specified as ``@default``, which matches the case when"
" calling VM didn’t specified any particular target (either by using "
"``@default`` target, or empty target). For DisposableVMs, "
"``@dispvm:DISP_VM`` is very similar to ``@dispvm`` but forces using a "
"particular VM (``DISP_VM``) as a base VM to be started as DisposableVM. For "
"example:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:197
#: 696bd16d02a34a4fb1f8e0f11e09fb21
msgid ""
"Adding such policy itself will not force usage of this particular "
"``DISP_VM`` - it will only allow it when specified by the caller. But "
"``@dispvm:DISP_VM`` can also be used as target in request redirection, so "
"*it is possible* to force particular ``DISP_VM`` usage, when caller didn’t "
"specify it:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:207
#: f3963bac93244cb88ff2e265cf480497
msgid ""
"Note that without redirection, this rule would allow using default "
"Disposable VM (``default_dispvm`` VM property, which itself defaults to "
"global ``default_dispvm`` property). Also note that the request will be "
"allowed (``allow`` action) even if there is no second rule allowing calls to"
" ``@dispvm:anon-whonix-dvm``, or even if there is a rule explicitly denying "
"it. This is because the redirection happens *after* considering the action."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:215
#: c211d3444500468da0cf2a47e2a0714e
msgid ""
"The policy confirmation dialog (``ask`` action) allows the user to specify "
"target VM. User can choose from VMs that, according to policy, would lead to"
" ``ask`` or ``allow`` actions. It is not possible to select VM that policy "
"would deny. By default no VM is selected, even if the caller provided some, "
"but policy can specify default value using ``default_target=`` parameter. "
"For example:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:228
#: 75f48a8dd4b343e3b98f03c803cb2b3c
msgid ""
"The first rule allow call from ``work-mail`` to ``work-archive``, without "
"any confirmation. The second rule will ask the user about calls from ``work-"
"mail`` VM to any VM with tag ``work``. And the confirmation dialog will have"
" ``work-files`` VM chosen by default, regardless of the VM specified by the "
"caller (``work-mail`` VM). The third rule allow the caller to not specify "
"target VM at all and let the user choose, still - from VMs with tag ``work``"
" (and ``work-archive``, regardless of tag), and with ``work-files`` as "
"default."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:238
#: b4a22277a4b24f479c256855ce6fbd81
msgid "RPC services and security"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:240
#: 51dd6beadd2a4a25b9188314b3e27a43
msgid ""
"Be very careful when coding and adding a new RPC service. Unless the offered"
" functionality equals full control over the target (it is the case with "
"e.g. ``qubes.VMShell`` action), any vulnerability in an RPC server can be "
"fatal to Qubes security. On the other hand, this mechanism allows to "
"delegate processing of untrusted input to less privileged (or disposable) "
"AppVMs, thus wise usage of it increases security."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:247
#: 8a36f0468f8b481a87cb94f21a9878e7
msgid ""
"For example, this command will run the ``firefox`` command in a DisposableVM"
" based on ``work``:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:254
#: b5ea8212854e4b4dbac44c38471a6c90
msgid "By contrast, consider this command:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:260
#: ef5666253bc844bc99d651fca3ad229c
msgid ""
"This will look for a ``firefox.desktop`` file in a standard location in a "
"DisposableVM based on ``work``, then launch the application described by "
"that file. The practical difference is that the bare ``qvm-run`` command "
"uses the ``qubes.VMShell`` service, which allows you to run an arbitrary "
"command with arbitrary arguments, essentially providing full control over "
"the target VM. By contrast, the ``qubes.StartApp`` service allows you to run"
" only applications that are advertised in ``/usr/share/applications`` (or "
"other standard locations) *without* control over the arguments, so giving a "
"VM access to ``qubes.StartApp`` is much safer. While there isn’t much "
"practical difference between the two commands above when starting an "
"application from dom0 in Qubes 4.0, there is a significant security risk "
"when launching applications from a domU (e.g., from a separate GUI domain). "
"This is why ``qubes.StartApp`` uses our standard ``qrexec`` argument grammar"
" to strictly filter the permissible grammar of the ``Exec=`` lines in "
"``.desktop`` files that are passed from untrusted domUs to dom0, thereby "
"protecting dom0 from command injection by maliciously-crafted ``.desktop`` "
"files."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:279
#: 778b7778d9e14509b435b755ec9f62fb
msgid "Service policies with arguments"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:281
#: 7042b0228bca4e11a93d7ab672f5e2ca
msgid ""
"Sometimes a service name alone isn’t enough to make reasonable qrexec "
"policy. One example of such a situation is :doc:`qrexec-based USB "
"passthrough </user/how-to-guides/how-to-use-usb-devices>`. Using just a "
"service name would make it difficult to express the policy “allow access to "
"devices X and Y, but deny to all others.” It isn’t feasible to create a "
"separate service for every device: we would need to change the code in "
"multiple files any time we wanted to update the service."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:288
#: 7786ebef998247128acb29bc4be0a06f
msgid ""
"For this reason it is possible to specify a service argument, which will be "
"subject to a policy. A service argument can make service policies more fine-"
"grained. With arguments, it is easier to write more precise policies using "
"the “allow” and “deny” actions, instead of relying on the “ask” method. "
"(Writing too many “ask” policies offloads additional decisions to the user. "
"Generally, the fewer choices the user must make, the lower the chance to "
"make a mistake.)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:296
#: 65ae55afe44448c297b0c098283605dc
msgid ""
"Each specific argument that we want to use needs its own policy in dom0 at a"
" path like ``/etc/qubes-rpc/policy/RPC_ACTION_NAME+ARGUMENT``. So for "
"instance, we might have policies called ``test.Device``, "
"``test.Device+device1`` and ``test.Device+device2``. If the policy for the "
"specific argument is not set (that is, if no file exists for "
"``RPC_ACTION_NAME+ARGUMENT``), then dom0 uses the default policy with no "
"argument for this service."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:304
#: 2ac1b955273f449b8bc5d284e250374e
msgid ""
"When calling a service that takes an argument, just add the argument to the "
"service name separated with ``+``."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:311
#: 10e68b27b1ad4afea7454c8e054d4a3b
msgid ""
"The script will receive ``ARGUMENT`` as its argument. The argument will also"
" become available as the ``QREXEC_SERVICE_ARGUMENT`` environment variable. "
"This means it is possible to install a different script for a particular "
"service argument."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:316
#: e234299ba08b4f08bb0e679bf2ca08d2
msgid ""
"See :ref:`below <developer/services/qrexec:rpc service with argument (file "
"reader)>` for an example of an RPC service using an argument."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:324
#: 4441c82323a34b2f9da9bc4ea6a8185d
msgid "Qubes RPC examples"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:326
#: 6178d7f55fb741faa1ed6b165c91843b
msgid ""
"To demonstrate some of the possibilities afforded by the qrexec framework, "
"here are two examples of custom RPC services."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:330
#: 3a479982ce984bf1a331fedfec1bd6e8
msgid "Simple RPC service (addition)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:332
#: a74871f8f6484246bac38fe071ab4051
msgid ""
"We can create an RPC service that adds two integers in a target domain (the "
"server, call it “anotherVM”) and returns back the result to the invoker (the"
" client, “someVM”). In someVM, create a file with the following contents and"
" save it with the path ``/usr/bin/our_test_add_client``:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:344
#: 1b5c3381c83547f9bb4182487abcbd67
msgid ""
"Our server will be anotherVM at ``/usr/bin/our_test_add_server``. The code "
"for this file is:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:353
#: 855ee36d5f3d46f999b4174d35a12512
msgid ""
"We’ll need to create a service called ``test.Add`` with its own definition "
"and policy file in dom0. Now we need to define what the service does. In "
"this case, it should call our addition script. We define the service with a "
"symlink at ``/etc/qubes-rpc/test.Add`` pointing to our server script (the "
"script can be also placed directly in ``/etc/qubes-rpc/test.Add`` - make "
"sure the file has executable bit set!):"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:365
#: 7b486a0cdd3c47168feb27a2af7a5879
msgid ""
"The administrative domain will direct traffic based on the current RPC "
"policies. In dom0, create a file at ``/etc/qubes-rpc/policy/test.Add`` "
"containing the following:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:373
#: 2dd54907dda34edb864846db7492e18e
msgid "This will allow our client and server to communicate."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:375
#: 38cae50baa904dc1aa95abfe57d24c2d
msgid ""
"Before we make the call, ensure that the client and server scripts have "
"executable permissions. Finally, invoke the RPC service."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:382
#: dc4f929ef9924503be8e2c6a1a85752e
msgid "We should get “3” as answer. (dom0 will ask for confirmation first.)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:384
#: 3ffeb2b5ca6b4eb7896b222660fd8922
msgid ""
"**Note:** For a real world example of writing a qrexec service, see this "
"`blog post <https://blog.invisiblethings.org/2013/02/21/converting-"
"untrusted-pdfs-into-trusted.html>`__."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:387
#: 688c7b38b4274066adecd0f0ad1b16aa
msgid "RPC service with argument (file reader)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:389
#: e429dcd83cff44c9bc6c6ed715ec39cc
msgid ""
"Here we create an RPC call that reads a specific file from a predefined "
"directory on the target. This example uses an :ref:`argument "
"<developer/services/qrexec:service policies with arguments>` to the policy. "
"In this example a simplified workflow will be used. The service code is "
"placed directly in the service definition file on the target VM. No separate"
" client script will be needed."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:395
#: d1a0c47239a24a15a7b0ee41fd91b588
msgid ""
"First, on your target VM, create two files in the home directory: "
"``testfile1`` and ``testfile2``. Have them contain two different “Hello "
"world!” lines."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:399
#: 9c280717c5b2461a840a52ca52331c22
msgid ""
"Next, we define the RPC service. On the target VM, place the code below at "
"``/etc/qubes-rpc/test.File``:"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:412
#: 932c6442d9b740438f9e4b3d74a5bf50
msgid ""
"Make sure the file is executable! (The service argument is already sanitized"
" by qrexec framework. It is guaranteed to not contain any spaces or slashes,"
" so there should be no need for additional path sanitization.)"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:417
#: 1731284617d343be949a281680b5b960
msgid ""
"Now we create three policy files in dom0. See the table below for details. "
"Replace “source_vm1” and others with the names of your own chosen domains."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:422
#: 2761a45543ee41aaa222cb1d6d8720c6
msgid "Policies"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:426
#: 938994434c984d7483485d96f6f00479
msgid "Path to file in dom0"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:427
#: fa75cdf1b1d54667a45bf02fe1a36c28
msgid "Policy contents"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:428
#: 4e4196f3ef684651b9c335f880d2ca5b
msgid "/etc/qubes-rpc/policy/test.File"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:429
#: a41d30f4e2ac439cb9728901280ac88b
msgid "@anyvm @anyvm deny"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:430
#: 3cecb0f9a718430fa1b744911e607a38
msgid "/etc/qubes-rpc/policy/test.File+testfile1"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:431
#: 833bf7a4a2424c86be5aaebc74a6df20
msgid "source_vm1 target_vm allow"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:432
#: 3047dc3f1bb94a3da5d154bbc37f0e0c
msgid "/etc/qubes-rpc/policy/test.File+testfile2"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:433
#: 526281c395f64f8bba88bbd85febc895
msgid "source_vm2 target_vm allow"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:435
#: bd880d45d88141719c651037b7c905e7
msgid ""
"With this done, we can run some tests. Invoke RPC from ``source_vm1`` via"
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:442
#: 24666ffd1a28415d91ac992f62ac675b
msgid ""
"We should get the contents of ``/home/user/testfile1`` printed to the "
"terminal. Invoking the service from ``source_vm2`` should work the same, and"
" ``testfile2`` should also work."
msgstr ""

#: ../../../_doc/developer/services/qrexec.rst:451
#: c62fa6174fbc4225861c83322e38b620
msgid ""
"But when invoked with other arguments or from a different VM, it should be "
"denied."
msgstr ""
