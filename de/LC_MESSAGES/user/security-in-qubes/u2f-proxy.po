# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, test
# This file is distributed under the same license as the qubes-docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Friedrich-Wilhelm Prussak <info@prussak.de>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: qubes-docs\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-08-29 01:28+0200\n"
"PO-Revision-Date: 2022-08-29 00:26+0000\n"
"Last-Translator: Friedrich-Wilhelm Prussak <info@prussak.de>, 2022\n"
"Language-Team: German (https://www.transifex.com/otf/teams/56717/de/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: de\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:3
#: b52ea4c240cf45b59871e2107d153fe2
msgid "U2F proxy"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:5
#: b02ff18cf5ab479280f821da42e14c1c
msgid ""
"The `Qubes U2F Proxy <https://github.com/QubesOS/qubes-app-u2f>`__ is a "
"secure proxy intended to make use of U2F two-factor authentication devices "
"with web browsers without exposing the browser to the full USB stack, not "
"unlike the :doc:`USB keyboard and mouse proxies </user/how-to-guides/how-to-"
"use-usb-devices>` implemented in Qubes."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:12
#: fff6fe69d66b42919b017372094092e8
msgid "What is U2F?"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:13
#: 08816724a16c4f2592fde0c746ac2d99
msgid ""
"`U2F <https://en.wikipedia.org/wiki/U2F>`__, which stands for “Universal"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:14
#: 25cfdfef2e4d49898f68247ca85bc368
msgid ""
"2nd Factor”, is a framework for authentication using hardware devices (U2F "
"tokens) as “second factors”, i.e. *what you have* as opposed to *what you "
"know*, like a passphrase. This additional control provides `good protection "
"<https://krebsonsecurity.com/2018/07/google-security-keys-neutralized-"
"employee-phishing/>`__ in cases in which the passphrase is stolen (e.g. by "
"phishing or keylogging). While passphrase compromise may not be obvious to "
"the user, a physical device that cannot be duplicated must be stolen to be "
"used outside of the owner’s control. Nonetheless, it is important to note at"
" the outset that U2F cannot guarantee security when the host system is "
"compromised (e.g. a malware-infected operating system under an adversary’s "
"control)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:25
#: 147fe6620b0d4c228537e74ec44cd7b3
msgid ""
"The U2F specification defines protocols for multiple layers from USB to the "
"browser API, and the whole stack is intended to be used with web "
"applications (most commonly websites) in browsers. In most cases, tokens are"
" USB dongles. The protocol is very simple, allowing the devices to store "
"very little state inside (so the tokens may be reasonably cheap) while "
"simultaneously authenticating a virtually unlimited number of services (so "
"each person needs only one token, not one token per application). The user "
"interface is usually limited to a single LED and a button that is pressed to"
" confirm each transaction, so the devices themselves are also easy to use."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:36
#: 282869091c6f4c4fa226607fd5e9c550
msgid ""
"Currently, the most common form of two-step authentication consists of a "
"numeric code that the user manually types into a web application. These "
"codes are typically generated by an app on the user’s smartphone or sent via"
" SMS. By now, it is well-known that this form of two-step authentication is "
"vulnerable to phishing and man-in-the-middle attacks due to the fact that "
"the application requesting the two-step authentication code is typically not"
" itself authenticated by the user. (In other words, users can accidentally "
"give their codes to attackers because they do not always know who is really "
"requesting the code.) In the U2F model, by contrast, the browser ensures "
"that the token receives valid information about the web application "
"requesting authentication, so the token knows which application it is "
"authenticating (for details, see `here "
"<https://fidoalliance.org/specs/fido-u2f-v1.2-ps-20170411/fido-u2f-overview-v1.2-ps-20170411.html#site-"
"specific-public-private-key-pairs>`__). Nonetheless, `some attacks are still"
" possible <https://www.wired.com/story/chrome-yubikey-phishing-webusb/>`__ "
"even with U2F (more on this below)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:52
#: 440fa250d1b847f8b8e59989e52dd498
msgid "The Qubes approach to U2F"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:54
#: 1ddae65ca7e84bd29b61ae06f3baaf86
msgid ""
"In a conventional setup, web browsers and the USB stack (to which the U2F "
"token is connected) are all running in the same monolithic OS. Since the U2F"
" model assumes that the browser is trustworthy, any browser in the OS is "
"able to access any key stored on the U2F token. The user has no way to know "
"which keys have been accessed by which browsers for which services. If any "
"of the browsers are compromised, it should be assumed that all of the "
"token’s keys have been compromised. (This problem can be mitigated, however,"
" if the U2F device has a special display to show the user what’s being "
"authenticated.) Moreover, since the USB stack is in the same monolithic OS, "
"the system is vulnerable to attacks like `BadUSB "
"<https://www.blackhat.com/us-14/briefings.html#badusb-on-accessories-that-"
"turn-evil>`__."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:65
#: 4b3cbb069cb34698904ca00432b3ef00
msgid ""
"In Qubes OS, by contrast, it is possible to securely compartmentalise the "
"browser in one qube and the USB stack in another so that they are always "
"kept separate from each other. The Qubes U2F Proxy then allows the token "
"connected to the USB stack in one qube to communicate with the browser in a "
"separate qube. We operate under the assumption that the USB stack is "
"untrusted from the point of view of the browser and also that the browser is"
" not to be trusted blindly by the token. Therefore, the token is never in "
"the same qube as the browser. Our proxy forwards only the data necessary to "
"actually perform the authentication, leaving all unnecessary data out, so it"
" won’t become a vector of attack. This is depicted in the diagram below "
"(click for full size)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:77
#: a9794e64105144d0a48f4be03772e3c6
msgid "|Qubes U2F Proxy diagram|"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:0
#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:0
#: 859b1d9a73c948999ae60373c9541f4f b64aafe746e4434e96affde7e75f3cb7
msgid "Qubes U2F Proxy diagram"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:79
#: c7f0f9b801d847169a66c4daf7b924f8
msgid ""
"The Qubes U2F Proxy has two parts: the frontend and the backend. The "
"frontend runs in the same qube as the browser and presents a fake USB-like "
"HID device using ``uhid``. The backend runs in ``sys-usb`` and behaves like "
"a browser. This is done using the ``u2flib_host`` reference library. All of "
"our code was written in Python. The standard :doc:`qrexec "
"</developer/services/qrexec>` policy is responsible for directing calls to "
"the appropriate domains."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:86
#: f966a245fb774dc68cf9c12d361140cb
msgid ""
"The ``vault`` qube with a dashed line in the bottom portion of the diagram "
"depicts future work in which we plan to implement the Qubes U2F Proxy with a"
" software token in an isolated qube rather than a physical hardware token. "
"This is similar to the manner in which :doc:`Split GPG </user/security-in-"
"qubes/split-gpg>` allows us to emulate the smart card model without physical"
" smart cards."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:92
#: e22e190abf624f29b67bf37c351fc6b5
msgid ""
"One very important assumption of U2F is that the browser verifies every "
"request sent to the U2F token — in particular, that the web application "
"sending an authentication request matches the application that would be "
"authenticated by answering that request (in order to prevent, e.g., a "
"phishing site from sending an authentication request for your bank’s site). "
"With the WebUSB feature in Chrome, however, a malicious website can `bypass "
"<https://www.wired.com/story/chrome-yubikey-phishing-webusb/>`__ this "
"safeguard by connecting directly to the token instead of using the browser’s"
" U2F API."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:102
#: 79eb1b6951fe4ff986f20875969b4db5
msgid ""
"The Qubes U2F Proxy also prevents this class of attacks by implementing an "
"additional verification layer. This verification layer allows you to "
"enforce, for example, that the web browser in your ``twitter`` qube can only"
" access the U2F key associated with ``https://twitter.com``. This means that"
" if anything in your ``twitter`` qube were compromised — the browser or even"
" the OS itself — it would still not be able to access the U2F keys on your "
"token for any other websites or services, like your email and bank accounts."
" This is another significant security advantage over monolithic systems. "
"(For details and instructions, see the :ref:`Advanced usage <user/security-"
"in-qubes/u2f-proxy:advanced usage: per-qube key access>` section below.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:112
#: 23c6193f90064c66a45cd5d8e66c96ef
msgid ""
"For even more protection, you can combine this with the :doc:`Qubes firewall"
" </user/security-in-qubes/firewall>` to ensure, for example, that the "
"browser in your ``banking`` qube accesses only one website (your bank’s "
"website). By configuring the Qubes firewall to prevent your ``banking`` qube"
" from accessing any other websites, you reduce the risk of another website "
"compromising the browser in an attempt to bypass U2F authentication."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:119
#: ff451e9c143441a6a3ea4aaffe0dfa86
msgid "Installation"
msgstr "Installation"

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:121
#: 15029ab5c6c34628a25c45a7bfc2e86c
msgid ""
"These instructions assume that there is a ``sys-usb`` qube that holds the "
"USB stack, which is the default configuration in most Qubes OS "
"installations."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:125
#: eb02a3bc78ef40aeaba1568f0f039a0f
msgid "In dom0:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:132
#: a58b86b80c464487a05505bf634526d6
msgid ""
"The above assumes a ``work`` qube in which you would like to enable u2f. "
"Repeat the ``qvm-service`` command for all qubes that should have the proxy "
"enabled. Alternatively, you can add ``qubes-u2f-proxy`` in VM settings -> "
"Services in the Qube Manager of each qube you would like to enable the "
"service."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:138
#: 475257d1d8eb458e8cabb8b496e95075
msgid "In Fedora templates:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:144
#: 2464d97005ff41f5a767975186ccdbfe
msgid "In Debian templates:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:150
#: a7dd3d33b95143d19d04efe2f4253949
msgid ""
"As usual with software updates, shut down the templates after installation, "
"then restart ``sys-usb`` and all qubes that use the proxy. After that, you "
"may use your U2F token (but see :ref:`Browser support <user/security-in-"
"qubes/u2f-proxy:template and browser support>` below)."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:155
#: 727be1fdc661402e995eca1d4bab11d5
msgid "Advanced usage: per-qube key access"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:157
#: 709e9236933244a7ab7df04737b3420f
msgid ""
"If you are using Qubes 4.0, you can further compartmentalise your U2F keys "
"by restricting each qube’s access to specific keys. For example, you could "
"make it so that your ``twitter`` qube (and, therefore, all web browsers in "
"your ``twitter`` qube) can access only the key on your U2F token for "
"``https://twitter.com``, regardless of whether any of the web browsers in "
"your ``twitter`` qube or the ``twitter`` qube itself are compromised. If "
"your ``twitter`` qube makes an authentication request for your bank website,"
" it will be denied at the Qubes policy level."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:166
#: 35cec5df1e0b4a809dc8709701e3865a
msgid ""
"To enable this, create a file in dom0 named ``/etc/qubes-"
"rpc/policy/policy.RegisterArgument+u2f.Authenticate`` with the following "
"content:"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:174
#: c951f192a8c34752b622f958b03a4f59
msgid ""
"Next, empty the contents of ``/etc/qubes-rpc/policy/u2f.Authenticate`` so "
"that it is a blank file. Do not delete the file itself. (If you do, the "
"default file will be recreated the next time you update, so it will no "
"longer be empty.) Finally, follow your web application’s instructions to "
"enroll your token and use it as usual. (This enrollment process depends on "
"the web application and is in no way specific to Qubes U2F.)"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:181
#: 66d3a70eb5c74bab96da10636705272d
msgid ""
"The default model is to allow a qube to access all and only the keys that "
"were enrolled by that qube. For example, if your ``banking`` qube enrolls "
"your banking key, and your ``twitter`` qube enrolls your Twitter key, then "
"your ``banking`` qube will have access to your banking key but not your "
"Twitter key, and your ``twitter`` qube will have access to your Twitter key "
"but not your banking key."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:189
#: 1787fa33df2b47f0a7bd873ade48cd49
msgid "Non-default USB qube name"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:191
#: 5bcf33fffe2f405b96f5d97c2b888e29
msgid ""
"If your USB qube is named differently than ``sys-usb``, then do the "
"following in the appropriate template(s):"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:199
#: b6db8f75a86f40f09971d4227534bb3f
msgid "Replace ``USB_QUBE`` with the actual USB qube name."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:201
#: fbe28a2b0dbd4c2d82da284b0e544ed7
msgid ""
"Do not forget to change the sys-usb qube name in the policy ``/etc/qubes-"
"rpc/policy/u2f.Authenticate``."
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:205
#: cc0530f970d24192910b2f802d107218
msgid "Template and browser support"
msgstr ""

#: ../../../_doc/user/security-in-qubes/u2f-proxy.rst:207
#: e45688a5c228412882b57dfb51024865
msgid ""
"The large number of possible combinations of template (Fedora 27, 28; Debian"
" 8, 9) and browser (multiple Google Chrome versions, multiple Chromium "
"versions, multiple Firefox versions) made it impractical for us to test "
"every combination that users are likely to attempt with the Qubes U2F Proxy."
" In some cases, you may be the first person to try a particular combination."
" Consequently (and as with any new feature), users will inevitably encounter"
" bugs. We ask for your patience and understanding in this regard. As always,"
" please :doc:`report any bugs you encounter </introduction/issue-tracking>`."
msgstr ""
